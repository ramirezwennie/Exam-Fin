// groceryStacks.js

// Create an empty array to act as our stack
const groceryStack = [];
const MAX_STACK_SIZE = 5; // Define a maximum size for our stack

/**
 * Checks if the stack is empty and returns the top element without removing it.
 * Also logs the stack's current state and size.
 * @returns {*} The top element of the stack, or undefined if the stack is empty.
 */
function peek() {
  if (groceryStack.length === 0) {
    console.log("Stack is empty.");
    return undefined;
  } else {
    const topItem = groceryStack[groceryStack.length - 1];
    console.log(`Current stack size: ${groceryStack.length}`);
    console.log(`Top item (peek): "${topItem}"`);
    return topItem;
  }
}

/**
 * Adds an item to the top of the stack.
 * Before pushing, it peeks to check the stack's state.
 * @param {string} item The grocery item to add.
 */
function push(item) {
  console.log(`\nAttempting to push: "${item}"`);
  if (groceryStack.length < MAX_STACK_SIZE) {
    groceryStack.push(item);
    console.log(`"${item}" has been added to the stack.`);
  } else {
    console.log("Stack is full. Cannot add more items.");
  }
  peek(); // Invoke peek after push
  console.log("Current Grocery Stack:", groceryStack);
}

/**
 * Removes and returns the top item from the stack.
 * Before popping, it peeks to check the stack's state.
 * @returns {*} The removed item, or undefined if the stack was empty.
 */
function pop() {
  console.log("\nAttempting to pop an item...");
  peek(); // Invoke peek before pop
  if (groceryStack.length === 0) {
    console.log("Stack is empty. No item to pop.");
    return undefined;
  } else {
    const removedItem = groceryStack.pop();
    console.log(`Removed item: "${removedItem}"`);
    peek(); // Invoke peek after pop
    console.log("Current Grocery Stack:", groceryStack);
    return removedItem;
  }
}

// --- Main execution ---

console.log("--- Initializing Grocery Stack ---");
peek(); // Initial check

// Prompt for 5 grocery items and push them onto the stack
for (let i = 0; i < MAX_STACK_SIZE; i++) {
  const item = prompt(`Enter grocery item ${i + 1} (out of ${MAX_STACK_SIZE}):`);
  if (item) { // Ensure user entered something
    push(item.trim());
  } else {
    console.log("No item entered. Skipping this push operation.");
    // Decrement i to allow another attempt for the current item if desired
    // Or you could break here if you want to stop if an empty input is given
    i--; 
  }
}

console.log("\n--- Demonstrating Pop Operations ---");

// Demonstrate popping items
pop(); // Pop the last item
pop(); // Pop another item
pop(); // Pop a third item

console.log("\n--- Current State of Stack ---");
peek();
console.log("Final Grocery Stack:", groceryStack);

// Try to pop more than available
pop();
pop();
pop(); // This will show stack is empty
